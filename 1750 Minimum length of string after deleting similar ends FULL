class Solution {
public:
    int minimumLength(string s) {
        int front = 0, rear = s.length() - 1;
        while(front < rear) {
            //printf("%c %c\n", s[front], s[rear]);
            if(s[front] == s[rear]) {
                char ch = s[front];
                while(front <= rear && s[front] == ch) front++;
                while(rear >= front && s[rear] == ch) rear--;
            }
            else break;
            
        }
        //printf("front = %d, rear = %d\n", front, rear);
        //if(front == rear) return 0;

        return rear - front + 1;
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int main() {
    string line;
    while (getline(cin, line)) {
        string s = stringToString(line);
        
        int ret = Solution().minimumLength(s);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
