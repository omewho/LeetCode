class Solution {
public:
    vector<vector<int>> memo;

    int dfshelper(vector<int>& nums, int left, int right) {
        if(left > right) return 0;

        if(memo[left][right] != -1) return memo[left][right];

        int chooseleft = nums[left] - dfshelper(nums, left + 1, right);
        int chooseright = nums[right] - dfshelper(nums, left, right - 1);
        memo[left][right] = max(chooseleft, chooseright);

        return memo[left][right];
    }

    bool solvedfs(vector<int>& nums) {
        int n = nums.size();
        memo = vector<vector<int>>(n, vector<int>(n, -1));

        return dfshelper(nums, 0, n - 1) >= 0;
    }

    bool solvedp(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> dp(n, vector<int> (n));
        //for(int i = 0; i < n; i++) dp[i][i] = nums[i];

        for(int i = n - 1; i >= 0; i--) {
            dp[i][i] = nums[i];

            for(int j = i + 1; j < n; j++) {
                dp[i][j] = max(nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1]);
            }
        }
        return dp[0][n - 1] >= 0;
    }

    bool PredictTheWinner(vector<int>& nums) {
        return solvedfs(nums);
        //return solvedp(nums);
    }
};
