class Solution {
public:
    string solvedpone(vector<int>& cost, int target) {
        vector<vector<int>> dp(10, vector<int>(target + 1, INT_MIN));
        vector<vector<int>> from(10, vector<int>(target + 1));
        dp[0][0] = 1;

        for(int i = 0; i < 9; i++) {
            int c = cost[i];

            for(int j = 0; j < target + 1; j++) {
                if(j < c) {
                    dp[i + 1][j] = dp[i][j];
                    from[i + 1][j] = j;
                }
                else {
                    if(dp[i][j] > dp[i + 1][j - c] + 1) {
                        dp[i + 1][j] = dp[i][j];
                        from[i + 1][j] = j;
                    }
                    else {
                        dp[i + 1][j] = dp[i + 1][j - c] + 1;
                        from[i + 1][j] = j - c;
                    }
                }
            }
        }

        if(dp[9][target] < 0) return "0";

        string ans = "";
        int i = 9, j = target;
        while(i) {
            if(from[i][j] == j) i--;
            else {
                ans += '0' + i;
                j = from[i][j];
            }
        }

        return ans;
    } 

    string solvedptwo(vector<int>& cost, int target) {
        vector<int> dp(target + 1, INT_MIN);
        dp[0] = 0;

        for(int c : cost) {
            for(int j = c; j < target + 1; j++) dp[j] = max(dp[j], dp[j - c] + 1);
        }

        if(dp[target] < 0) return "0";

        string ans = "";
        
        for(int i = 9, j = target; i > 0; i--) {
            int c = cost[i - 1];
            while(j >= c && dp[j] == dp[j - c] + 1) {
                ans += '0' + i;
                j -= c;
            }
        }

        return ans;
    }

    string largestNumber(vector<int>& cost, int target) {
        //return solvedpone(cost, target);
        return solvedptwo(cost, target);
    }
};
