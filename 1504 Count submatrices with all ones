class Solution {
    using PII = pair<int, int>;
public:
    int row, col;
    int solveone(vector<vector<int>>& mat) {
        int* rowpresum[row];
        for(int i = 0; i < row; i++) {
            rowpresum[i] = new int[col];
            memset(rowpresum[i], 0, sizeof(int) * (col));
        }

        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if(j == 0) rowpresum[i][j] = mat[i][j];
                else if(mat[i][j]) rowpresum[i][j] = rowpresum[i][j - 1] + 1;
            }
        }

        // for(int i = 0; i < row; i++) {
        //     for(int j = 0; j < col; j++) {
        //         printf(" %d ", rowpresum[i][j]);
        //     }
        //     printf("\n");
        // }

        int ans = 0;
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                int side = rowpresum[i][j];
                for(int k = i; k >= 0 && side; k--) {
                    side = min(side, rowpresum[k][j]);
                    ans += side;
                }
            }
        }        

        return ans;
    }

    int solvetwo(vector<vector<int>>& mat) {
        int* rowpresum[row];
        for(int i = 0; i < row; i++) {
            rowpresum[i] = new int[col];
            memset(rowpresum[i], 0, sizeof(int) * (col));
        }

        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if(j == 0) rowpresum[i][j] = mat[i][j];
                else if(mat[i][j]) rowpresum[i][j] = rowpresum[i][j - 1] + 1;
            }
        }

        int ans = 0, curr_width;
        for(int j = 0; j < col; j++) {
            int sum = 0;
            stack<PII> stk;
            for(int i = 0; i < row; i++) {
                int height = 1;
                curr_width = rowpresum[i][j];
                while( !stk.empty() && stk.top().first > curr_width ) {
                    sum -= (stk.top().first - curr_width) * stk.top().second;
                    height += stk.top().second;
                    stk.pop();
                }
                sum += rowpresum[i][j];
                ans += sum;
                stk.emplace(curr_width, height);
            }
            
        }        

        return ans;
    }

    int numSubmat(vector<vector<int>>& mat) {
        row = mat.size();
        col = mat[0].size();

        return solveone(mat);
        //return solvetwo(mat);
    }
};
