class Solution {
public:
    int row, col;
    int solveone(vector<vector<int>>& mat) {
        int* rowpresum[row];
        for(int i = 0; i < row; i++) {
            rowpresum[i] = new int[col];
            memset(rowpresum[i], 0, sizeof(int) * (col));
        }

        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if(j == 0) rowpresum[i][j] = mat[i][j];
                else if(mat[i][j]) rowpresum[i][j] = rowpresum[i][j - 1] + 1;
            }
        }

        // for(int i = 0; i < row; i++) {
        //     for(int j = 0; j < col; j++) {
        //         printf(" %d ", rowpresum[i][j]);
        //     }
        //     printf("\n");
        // }

        int ans = 0;
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                int side = rowpresum[i][j];
                for(int k = i; k >= 0 && side; k--) {
                    side = min(side, rowpresum[k][j]);
                    ans += side;
                }
            }
        }        

        return ans;
    }

    int numSubmat(vector<vector<int>>& mat) {
        row = mat.size();
        col = mat[0].size();

        return solveone(mat);

    }
};
