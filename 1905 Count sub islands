class Solution {
    static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    using PII = pair<int, int>;
public:
    int m, n;
    bool bfshelper(vector<vector<int>>& grid1, vector<vector<int>>& grid2, vector<vector<int>>& visited, int x, int y){
        queue<PII> que;
        que.emplace(x, y);
        //printf("%d %d\n", x, y);
        visited[x][y] = 1;

        bool ans = grid1[x][y];
        while(!que.empty()){
            auto [px, py] = que.front(); que.pop();
            for(int i = 0; i < 4; i++) {
                int nx = px + dirs[i][0], ny = py + dirs[i][1];
                if(nx < 0 || nx >= m || ny < 0 || ny >= n || visited[nx][ny]) continue;
                if(grid2[nx][ny]) {
                    //printf(" nx , ny %d %d\n", nx ,ny);
                    que.emplace(nx, ny);
                    visited[nx][ny] = 1;
                    if(grid1[nx][ny] != grid2[nx][ny]) ans =false;
                }
            }
        }
        return ans;
    }

    int solvebfs(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {
        vector<vector<int>> visited(m, vector<int>(n, 0));

        int ans = 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid2[i][j] && !visited[i][j]) {
                    if(bfshelper(grid1, grid2, visited, i, j)) ans++;
                }
            }
        }
        return ans;
    }

    int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {
        m = grid1.size(), n = grid1[0].size();
        return solvebfs(grid1, grid2);
    }
};
