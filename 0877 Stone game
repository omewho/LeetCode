class Solution {
public:
    bool solvedp(vector<int>& piles) {

        int n = piles.size();
        int** dp = new int*[n];
        for(int i = 0; i < n; i++) {
            dp[i] = new int[n];
            memset(dp[i], 0, sizeof(int) * n);
        }

        for(int i = n - 1; i >= 0; i--) {
            dp[i][i] = piles[i];
            for(int j = i + 1; j < n; j++) {
                dp[i][j] = max(piles[i] - dp[i + 1][j], piles[j] - dp[i][j - 1]);
            }
        }

        return dp[0][n - 1] > 0;
    }

    int dfshelper(vector<int>& piles, int left, int right, vector<vector<int>>& memo) {

        if(left == right) return piles[left];

        if(memo[left][right] !=  0) return memo[left][right];

        int chooseleft = piles[left] - dfshelper(piles, left + 1, right, memo);
        int chooseright = piles[right] - dfshelper(piles, left, right - 1, memo);
        memo[left][right] = max(chooseleft, chooseright);

        return memo[left][right];
    }

    bool solvememo(vector<int>& piles) {
        int n =  piles.size();
        vector<vector<int>> memo(n, vector<int>(n));
        //for(int i = 0; i < n; i++) memo[i][i] = piles[i];

        return dfshelper(piles, 0, n - 1, memo);
    }

    bool solvemath(vector<int>& piles) {
        return true;
    }

    bool stoneGame(vector<int>& piles) {
        //return solvemath(piles);
        //return solvedp(piles);
        return solvememo(piles);
    }
};
