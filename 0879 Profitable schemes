class Solution {
    static constexpr int modula = 1e9 + 7;
public:
    int jobs;
    int solvedp(int n, int minProfit, vector<int>& group, vector<int>& profit) {
        vector<vector<int>> dp(n + 1, vector<int>(minProfit + 1, 0));
        for(int i = 0; i < n + 1; i++) dp[i][0] = 1;

        for(int i = 1; i <= jobs; i++) {
            int workers = group[i - 1], currProfit = profit[i - 1];
            for(int j = n; j >= workers; j--) {
                for(int k = minProfit; k >= 0; k--) {
                    dp[j][k] = ( dp[j][k] + dp[j - workers][max(0, k - currProfit)] ) % modula;
                }
            }
        }

        return dp[n][minProfit];
    }

    int profitableSchemes(int n, int minProfit, vector<int>& group, vector<int>& profit) {
        jobs = group.size();

        return solvedp(n, minProfit, group, profit);
    }
};
