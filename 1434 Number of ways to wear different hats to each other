class Solution {
    static constexpr int modula = 1e9 + 7;
public:
    int solvedp(vector<vector<int>>& hats) {

        int maxID = 0, n = hats.size();

        for(vector<int>& h: hats) {
            for(int id: h) maxID = max(maxID, id);
        }

        vector<vector<int>> hat2person(maxID + 1);

        for(int i = 0; i < n; i++) {
            for(int hat: hats[i]) hat2person[hat].emplace_back(i);
        }

        vector<vector<int>> dp(maxID + 1, vector<int> (1 << n, 0));
        dp[0][0] = 1;

        for(int i = 1; i < maxID + 1; i++) {
            for(int mask = 0; mask < (1 << n); mask++) {
                dp[i][mask] = dp[i - 1][mask];
                for(int j: hat2person[i]) {
                    if(mask & (1 << j)) {
                        dp[i][mask] += dp[i - 1][mask ^ (1 << j)];
                        dp[i][mask] %= modula;
                    }
                }
            }
        }



        return dp[maxID][(1 << n) - 1];
    }
    int numberWays(vector<vector<int>>& hats) {
        return solvedp(hats);
    }
};
