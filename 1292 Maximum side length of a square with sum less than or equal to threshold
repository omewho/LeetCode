class Solution {
public:
    int row, col;

    int getRectArea(int ** presum, int x1, int y1, int x2, int y2) {
        return presum[x2][y2] - presum[x1 - 1][y2] - presum[x2][y1 - 1] + presum[x1 -1][y1 -1];
    }
    
    int solve(vector<vector<int>>& mat, int threshold) {
        row = mat.size(), col = mat[0].size();
        
        int** presum = new int*[row + 1]; 

        for(int i = 0; i < row + 1; i++) {
            presum[i] = new int[col + 1];
            memset(presum[i], 0, sizeof(int) * (col + 1));
        }

        for(int i = 1; i < row + 1; i++) {
            for(int j = 1; j < col + 1; j++) {
                presum[i][j] = presum[i - 1][j] + presum[i][j - 1] - presum[i - 1][j - 1] + mat[i - 1][j - 1];
            }
        }

        int r = min(row, col), ans = 0;

        for(int i = 1; i < row + 1; i++) {
            for(int j = 1; j < col + 1; j++) {
                for(int side = ans + 1; side <= r; side++) {
                    if(i + side - 1 < row + 1 && j + side - 1 < col + 1 && getRectArea(presum, i, j, i + side - 1, j + side - 1) <= threshold) ans++;
                    else break;
                }
            }
        }

        return ans;
    }

    int maxSideLength(vector<vector<int>>& mat, int threshold) {
        return solve(mat, threshold);
    }
};
