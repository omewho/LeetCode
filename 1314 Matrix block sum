class Solution {
public:
    int row, col;

    int getPre(int** presum, int x, int y) {
        return presum[max(min(x, row), 0)][max(min(y, col), 0)];
    }

    vector<vector<int>> solve(vector<vector<int>>& mat, int k) {

        row = mat.size(), col = mat[0].size();

        int** presum = new int*[row + 1];
        for(int i = 0; i < row + 1; i++) {
            presum[i] = new int[col + 1];
            memset(presum[i], 0, sizeof(int) * (col + 1));
        }

        for(int i = 1; i < row + 1; i++) {
            for(int j = 1; j < col + 1; j++) {
                presum[i][j] = presum[i - 1][j] + presum[i][j - 1] - presum[i - 1][j - 1] + mat[i - 1][j - 1];
            }
        }

        vector<vector<int>> ans(row, vector<int>(col));

        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                ans[i][j] = getPre(presum, i + k + 1, j + k + 1) - getPre(presum, i - k, j + k + 1) - getPre(presum, i + k + 1, j - k) + getPre(presum, i - k, j - k);
            }
        }
        
        return ans;
    }
    
    vector<vector<int>> matrixBlockSum(vector<vector<int>>& mat, int k) {
        return solve(mat, k);
    }
};
