class Solution {
public:

    bool solveone(int n) {
        /***
        if( !n ) return false;
        while( n % 4 == 0 ) {
            n /= 4;
        }
        //printf("%d\n", INT_MIN / 2);

        return n == 1;
        ***/

        //return n > 0 && ( ( n & (n - 1) ) == 0) && (n & 0x55555555);

        if(n <= 0) return false;
        while( n > 0 ) {
            if(n == 1) return true;

            if( n % 4 != 0) return false;
            n /= 4;
        }

        return true;
    }

    bool solvetwo(int n) {
        if(n <= 0 || ( n & (n - 1)) != 0) return false;

        for(int i = 0; i < 32; i += 2) {
            if(n == ( 1 << i) ) return true;
        }

        return false;
    }

    bool solvethree(int n) {

        return n > 0 && (n & (n - 1)) == 0 && (n & (0x2AAAAAAA)) == 0;
    }

    bool solvefour(int n) {

        return n > 0 && (n & (n - 1)) == 0 && n % 3 == 1 ;
    }

    bool isPowerOfFour(int n) {

        //return solveone(n);

        //return solvetwo(n);

        //return solvethree(n);

        return solveone(n);
    }
};

int stringToInteger(string input) {
    return stoi(input);
}

string boolToString(bool input) {
    return input ? "True" : "False";
}

int main() {
    string line;
    while (getline(cin, line)) {
        int n = stringToInteger(line);
        
        bool ret = Solution().isPowerOfFour(n);

        string out = boolToString(ret);
        cout << out << endl;
    }
    return 0;
}
