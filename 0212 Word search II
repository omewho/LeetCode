class Trie {

public:
    string word;
    Trie* children[26] = {nullptr};
    Trie(){};

    void insert(string _word) {
        Trie* curr = this;
        for(char ch: _word) {
            if(!curr->children[ch - 'a']) curr->children[ch - 'a'] = new Trie();
            curr = curr->children[ch - 'a'];
        }
        curr->word = _word;
    }
};

class Solution {
    static constexpr int dirs[4][2] = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};
public:
    int row, col;
    vector<string> ans;

    void dfshelper(vector<vector<char>>& board, int x, int y, Trie* root) {
        char ch = board[x][y];

        if(ch == '.') return;
        if(root->children[ch - 'a'] == nullptr) return;

        root = root->children[ch - 'a'];
        if(root->word.size()) {
            ans.emplace_back(root->word);
            root->word = "";
        }

        board[x][y] = '.';
        
        for(int i = 0; i < 4; i++) {
            int nx = x + dirs[i][0];
            int ny = y + dirs[i][1];

            if(nx >= 0 && nx < row && ny >= 0 && ny < col && board[nx][ny] != '.') dfshelper(board, nx, ny, root);
        }

        board[x][y] = ch;

    }

    vector<string> solve(vector<vector<char>>& board, vector<string>& words) {

        row = board.size();
        col = board[0].size();

        Trie* root = new Trie();

        for(string word: words) root->insert(word);

        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                dfshelper(board, i, j, root);
            }
        }

        return ans;
    }

    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        return solve(board, words);
    }
};
